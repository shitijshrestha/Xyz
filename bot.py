import telebot
import subprocess
import threading
import os
import time
from datetime import datetime

# ---------------- CONFIG ----------------
BOT_TOKEN = "7994446557:AAHoC-lsN137MmZfVMHiTWHRXRBHCFlwCKA"
bot = telebot.TeleBot(BOT_TOKEN, parse_mode="Markdown")

# ---------------- GLOBAL ----------------
MAX_SIZE = 2 * 1024 * 1024 * 1024  # 2GB
RECORDINGS = {}

# ---------------- FUNCTION: Time Conversion ----------------
def parse_duration(time_str):
    """HH:MM:SS ‡§ï‡•ã ‡§∏‡•á‡§ï‡§Ç‡§° ‡§Æ‡•á‡§Ç ‡§¨‡§¶‡§≤‡•ã"""
    parts = time_str.split(":")
    if len(parts) == 3:
        h, m, s = map(int, parts)
        return h * 3600 + m * 60 + s
    elif len(parts) == 2:
        m, s = map(int, parts)
        return m * 60 + s
    elif len(parts) == 1:
        return int(parts[0])
    else:
        return 0

# ---------------- FUNCTION: ‡§∞‡§ø‡§ï‡•â‡§∞‡•ç‡§°‡§ø‡§Ç‡§ó ----------------
def record_stream(url, duration, title, chat_id, task_id):
    try:
        start_time = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        filename = f"{title}_{int(time.time())}.mp4"

        cmd = [
            "ffmpeg",
            "-y",
            "-i", url,
            "-t", str(duration),
            "-c", "copy",
            filename
        ]

        bot.send_message(chat_id, f"""
üé¨ *‡§∞‡§ø‡§ï‡•â‡§∞‡•ç‡§°‡§ø‡§Ç‡§ó ‡§∂‡•Å‡§∞‡•Ç!*

üé• *‡§ü‡§æ‡§á‡§ü‡§≤:* `{title}`
‚è± *Duration:* {duration} ‡§∏‡•á‡§ï‡§Ç‡§°
üïí *‡§∂‡•Å‡§∞‡•Å‡§Ü‡§§:* {start_time}
üîó *URL:* `{url}`
üÜî *Task ID:* `{task_id}`
        """)

        process = subprocess.Popen(cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
        RECORDINGS[task_id] = process

        process.wait()

        if os.path.exists(filename):
            size = os.path.getsize(filename)
            if size > MAX_SIZE:
                bot.send_message(chat_id, "‚ö†Ô∏è ‡§µ‡•Ä‡§°‡§ø‡§Ø‡•ã 2GB ‡§∏‡•á ‡§¨‡§°‡§º‡§æ ‡§π‡•à ‚Äî ‡§Ö‡§™‡§≤‡•ã‡§° ‡§®‡§π‡•Ä‡§Ç ‡§ï‡§ø‡§Ø‡§æ ‡§ú‡§æ ‡§∏‡§ï‡§§‡§æ‡•§")
            else:
                bot.send_message(chat_id, "üì§ *‡§Ö‡§™‡§≤‡•ã‡§° ‡§∂‡•Å‡§∞‡•Ç ‡§π‡•ã ‡§∞‡§π‡§æ ‡§π‡•à...*")
                with open(filename, "rb") as video:
                    bot.send_video(chat_id, video, caption=f"‚úÖ *‡§∞‡§ø‡§ï‡•â‡§∞‡•ç‡§°‡§ø‡§Ç‡§ó ‡§™‡•Ç‡§∞‡•Ä!* \nüìù *‡§ü‡§æ‡§á‡§ü‡§≤:* `{title}` \nüïí *Duration:* {duration} ‡§∏‡•á‡§ï‡§Ç‡§°")
                bot.send_message(chat_id, "‚úÖ *Upload Complete!*")
            os.remove(filename)
        else:
            bot.send_message(chat_id, "‚ùå *‡§∞‡§ø‡§ï‡•â‡§∞‡•ç‡§°‡§ø‡§Ç‡§ó ‡§´‡§æ‡§á‡§≤ ‡§®‡§π‡•Ä‡§Ç ‡§Æ‡§ø‡§≤‡•Ä!*")

    except Exception as e:
        bot.send_message(chat_id, f"‚ö†Ô∏è Error: `{str(e)}`")

    finally:
        if task_id in RECORDINGS:
            del RECORDINGS[task_id]

# ---------------- COMMAND: /record ----------------
@bot.message_handler(commands=['record'])
def handle_record(message):
    try:
        parts = message.text.split(" ")
        if len(parts) < 4:
            bot.reply_to(message, "‚ùå ‡§â‡§™‡§Ø‡•ã‡§ó:\n`/record <url> <duration> <title>`\n\n‡§â‡§¶‡§æ‡§π‡§∞‡§£:\n`/record https://abc/playlist.m3u8 00:00:10 TestVideo`")
            return

        url = parts[1]
        duration_str = parts[2]
        title = " ".join(parts[3:])
        duration = parse_duration(duration_str)
        chat_id = message.chat.id
        task_id = str(int(time.time()))

        thread = threading.Thread(target=record_stream, args=(url, duration, title, chat_id, task_id))
        thread.start()

        bot.send_message(chat_id, f"üé• *‡§∞‡§ø‡§ï‡•â‡§∞‡•ç‡§°‡§ø‡§Ç‡§ó ‡§∂‡•Å‡§∞‡•Ç ‡§π‡•Å‡§à ‡§π‡•à!* Task ID: `{task_id}`")

    except Exception as e:
        bot.reply_to(message, f"‚ö†Ô∏è Error: `{str(e)}`")

# ---------------- COMMAND: /stop ----------------
@bot.message_handler(commands=['stop'])
def stop_record(message):
    try:
        parts = message.text.split(" ")
        if len(parts) < 2:
            bot.reply_to(message, "‚ùå ‡§â‡§™‡§Ø‡•ã‡§ó: `/stop <task_id>`")
            return

        task_id = parts[1]
        if task_id in RECORDINGS:
            process = RECORDINGS[task_id]
            process.terminate()
            del RECORDINGS[task_id]
            bot.reply_to(message, f"üõë ‡§∞‡§ø‡§ï‡•â‡§∞‡•ç‡§°‡§ø‡§Ç‡§ó ‡§¨‡§Ç‡§¶ ‡§ï‡§∞ ‡§¶‡•Ä ‡§ó‡§à! Task ID: `{task_id}`")
        else:
            bot.reply_to(message, f"‚ö†Ô∏è ‡§ï‡•ã‡§à ‡§∞‡§ø‡§ï‡•â‡§∞‡•ç‡§°‡§ø‡§Ç‡§ó ‡§®‡§π‡•Ä‡§Ç ‡§Æ‡§ø‡§≤‡•Ä ID `{task_id}`")

    except Exception as e:
        bot.reply_to(message, f"‚ö†Ô∏è Error: `{str(e)}`")

# ---------------- COMMAND: /list ----------------
@bot.message_handler(commands=['list'])
def list_records(message):
    if not RECORDINGS:
        bot.reply_to(message, "üì≠ ‡§ï‡•ã‡§à ‡§∞‡§ø‡§ï‡•â‡§∞‡•ç‡§°‡§ø‡§Ç‡§ó ‡§®‡§π‡•Ä‡§Ç ‡§ö‡§≤ ‡§∞‡§π‡•Ä‡•§")
    else:
        msg = "üé¨ *‡§ö‡§≤ ‡§∞‡§π‡•Ä ‡§∞‡§ø‡§ï‡•â‡§∞‡•ç‡§°‡§ø‡§Ç‡§ó‡•ç‡§∏:*\n\n"
        for tid in RECORDINGS:
            msg += f"üÜî `{tid}` - ‡§ö‡§≤ ‡§∞‡§π‡•Ä ‡§π‡•à...\n"
        bot.reply_to(message, msg)

# ---------------- COMMAND: /help ----------------
@bot.message_handler(commands=['help', 'start'])
def help_command(message):
    bot.reply_to(message, """
üëã *‡§∞‡§ø‡§ï‡•â‡§∞‡•ç‡§°‡§ø‡§Ç‡§ó ‡§¨‡•â‡§ü ‡§Æ‡•á‡§Ç ‡§Ü‡§™‡§ï‡§æ ‡§∏‡•ç‡§µ‡§æ‡§ó‡§§ ‡§π‡•à!*

üé¨ **‡§ï‡§Æ‡§æ‡§Ç‡§° ‡§∏‡•Ç‡§ö‡•Ä:**
- `/record <url> <duration> <title>` ‚Äî M3U8 ‡§≤‡§ø‡§Ç‡§ï ‡§∞‡§ø‡§ï‡•â‡§∞‡•ç‡§° ‡§ï‡§∞‡•á‡§Ç  
  ‚û§ ‡§â‡§¶‡§æ‡§π‡§∞‡§£: `/record https://abc/playlist.m3u8 00:00:10 TestVideo`
- `/list` ‚Äî ‡§ö‡§≤ ‡§∞‡§π‡•Ä ‡§∞‡§ø‡§ï‡•â‡§∞‡•ç‡§°‡§ø‡§Ç‡§ó‡•ç‡§∏ ‡§¶‡•á‡§ñ‡•á‡§Ç  
- `/stop <task_id>` ‚Äî ‡§ï‡§ø‡§∏‡•Ä ‡§∞‡§ø‡§ï‡•â‡§∞‡•ç‡§°‡§ø‡§Ç‡§ó ‡§ï‡•ã ‡§¨‡§Ç‡§¶ ‡§ï‡§∞‡•á‡§Ç  

üíæ *‡§∏‡•Ä‡§Æ‡§æ:* 2GB ‡§§‡§ï ‡§ï‡•Ä ‡§´‡§æ‡§á‡§≤‡•á‡§Ç ‡§Ö‡§™‡§≤‡•ã‡§° ‡§π‡•ã‡§Ç‡§ó‡•Ä‡•§
    """)

# ---------------- BOT RUN ----------------
bot.infinity_polling()
