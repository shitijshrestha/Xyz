import telebot
import subprocess
import threading
import os
import time
import math
import io
from functools import wraps
from telebot.apihelper import ApiTelegramException

# ---------------- CONFIG ----------------
BOT_TOKEN = "7994446557:AAHoC-lsN137MmZfVMHiTWHRXRBHCFlwCKA"
bot = telebot.TeleBot(BOT_TOKEN, num_threads=30)

ADMIN_IDS = [6403142441]  # Change to your Telegram ID
MAX_SIZE_MB = 50  # Telegram video part limit in MB

active_recordings = {}  # chat_id -> {msg_id: process_info}
lock = threading.Lock()  # for thread-safe updates

# ---------------- DECORATORS ----------------
def admin_only(func):
    @wraps(func)
    def wrapped(message, *args, **kwargs):
        if message.from_user.id in ADMIN_IDS:
            return func(message, *args, **kwargs)
        else:
            bot.reply_to(message, "‚õî ‡§ï‡•á‡§µ‡§≤ ‡§è‡§°‡§Æ‡§ø‡§® ‡§π‡•Ä ‡§á‡§∏ ‡§ï‡§Æ‡§æ‡§Ç‡§° ‡§ï‡§æ ‡§â‡§™‡§Ø‡•ã‡§ó ‡§ï‡§∞ ‡§∏‡§ï‡§§‡•á ‡§π‡•à‡§Ç!")
    return wrapped

def safe_edit_message(text, chat_id, message_id, **kwargs):
    if len(text) > 4096:
        text = text[:4090] + "..."
    try:
        bot.edit_message_text(text, chat_id, message_id, **kwargs)
    except ApiTelegramException:
        pass

# ---------------- COMMANDS ----------------
@bot.message_handler(commands=['start'])
@admin_only
def start(message):
    bot.reply_to(message, "üëã ‡§¨‡•â‡§ü ‡§ö‡§æ‡§≤‡•Ç ‡§π‡•à! ‡§â‡§™‡§Ø‡•ã‡§ó ‡§ï‡§∞‡•á‡§Ç /help ‡§∏‡§≠‡•Ä ‡§ï‡§Æ‡§æ‡§Ç‡§° ‡§¶‡•á‡§ñ‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è‡•§")

@bot.message_handler(commands=['help'])
@admin_only
def help_command(message):
    text = """
üìå **‡§â‡§™‡§≤‡§¨‡•ç‡§ß ‡§ï‡§Æ‡§æ‡§Ç‡§°‡•ç‡§∏**

/start - ‡§¨‡•â‡§ü ‡§∂‡•Å‡§∞‡•Ç ‡§ï‡§∞‡•á‡§Ç  
/help - ‡§∏‡§≠‡•Ä ‡§ï‡§Æ‡§æ‡§Ç‡§° ‡§¶‡§ø‡§ñ‡§æ‡§è‡§Ç  
/status - ‡§¨‡•â‡§ü ‡§ï‡•Ä ‡§∏‡•ç‡§•‡§ø‡§§‡§ø ‡§¶‡•á‡§ñ‡•á‡§Ç  
/myrecordings - ‡§Ü‡§™‡§ï‡•Ä ‡§∏‡§ï‡•ç‡§∞‡§ø‡§Ø ‡§∞‡§ø‡§ï‡•â‡§∞‡•ç‡§°‡§ø‡§Ç‡§ó‡•ç‡§∏  
/record <URL> <hh:mm:ss> <title> - ‡§∏‡•ç‡§ü‡•ç‡§∞‡•Ä‡§Æ ‡§∞‡§ø‡§ï‡•â‡§∞‡•ç‡§° ‡§ï‡§∞‡•á‡§Ç  
/cancel - ‡§ï‡§ø‡§∏‡•Ä ‡§∞‡§ø‡§ï‡•â‡§∞‡•ç‡§°‡§ø‡§Ç‡§ó ‡§ï‡•ã ‡§∞‡§¶‡•ç‡§¶ ‡§ï‡§∞‡•á‡§Ç (‡§∞‡§ø‡§ï‡•â‡§∞‡•ç‡§°‡§ø‡§Ç‡§ó ‡§Æ‡•á‡§∏‡•á‡§ú ‡§ï‡•ã reply ‡§ï‡§∞‡•á‡§Ç)  
/screenshot <URL> - ‡§è‡§ï ‡§∏‡•ç‡§ï‡•ç‡§∞‡•Ä‡§®‡§∂‡•â‡§ü ‡§≤‡•á‡§Ç  

**Admin Commands**  
/allrecordings - ‡§∏‡§≠‡•Ä ‡§∏‡§ï‡•ç‡§∞‡§ø‡§Ø ‡§∞‡§ø‡§ï‡•â‡§∞‡•ç‡§°‡§ø‡§Ç‡§ó‡•ç‡§∏ ‡§¶‡•á‡§ñ‡•á‡§Ç  
/broadcast <msg> - ‡§∏‡§≠‡•Ä ‡§è‡§°‡§Æ‡§ø‡§® ‡§ï‡•ã ‡§Æ‡•à‡§∏‡•á‡§ú ‡§≠‡•á‡§ú‡•á‡§Ç  

**‡§â‡§¶‡§æ‡§π‡§∞‡§£:**  
/record https://url.m3u8 00:10:00 Testing
"""
    bot.reply_to(message, text)

@bot.message_handler(commands=['status'])
@admin_only
def status(message):
    total = sum(len(r) for r in active_recordings.values())
    bot.reply_to(message, f"‚úÖ ‡§¨‡•â‡§ü ‡§ö‡§æ‡§≤‡•Ç ‡§π‡•à‡•§ ‡§∏‡§ï‡•ç‡§∞‡§ø‡§Ø ‡§∞‡§ø‡§ï‡•â‡§∞‡•ç‡§°‡§ø‡§Ç‡§ó‡•ç‡§∏: {total}")

@bot.message_handler(commands=['myrecordings'])
@admin_only
def myrecordings(message):
    chat_id = message.chat.id
    if chat_id in active_recordings and active_recordings[chat_id]:
        text = "üé¨ ‡§Ü‡§™‡§ï‡•Ä ‡§∏‡§ï‡•ç‡§∞‡§ø‡§Ø ‡§∞‡§ø‡§ï‡•â‡§∞‡•ç‡§°‡§ø‡§Ç‡§ó‡•ç‡§∏:\n"
        for msg_id, info in active_recordings[chat_id].items():
            text += f"- {info['title']} (PID: {info['proc'].pid})\n"
    else:
        text = "‡§ï‡•ã‡§à ‡§∏‡§ï‡•ç‡§∞‡§ø‡§Ø ‡§∞‡§ø‡§ï‡•â‡§∞‡•ç‡§°‡§ø‡§Ç‡§ó ‡§®‡§π‡•Ä‡§Ç ‡§Æ‡§ø‡§≤‡•Ä‡•§"
    bot.reply_to(message, text)

@bot.message_handler(commands=['allrecordings'])
@admin_only
def allrecordings(message):
    total = sum(len(r) for r in active_recordings.values())
    if total == 0:
        bot.reply_to(message, "‡§ï‡•ã‡§à ‡§∏‡§ï‡•ç‡§∞‡§ø‡§Ø ‡§∞‡§ø‡§ï‡•â‡§∞‡•ç‡§°‡§ø‡§Ç‡§ó ‡§®‡§π‡•Ä‡§Ç ‡§π‡•à‡•§")
        return
    text = f"üé¨ ‡§∏‡§≠‡•Ä ‡§∏‡§ï‡•ç‡§∞‡§ø‡§Ø ‡§∞‡§ø‡§ï‡•â‡§∞‡•ç‡§°‡§ø‡§Ç‡§ó‡•ç‡§∏ ({total}):\n"
    for chat_id, recs in active_recordings.items():
        text += f"\nChat {chat_id}:\n"
        for msg_id, info in recs.items():
            text += f"- {info['title']} (PID: {info['proc'].pid})\n"
    bot.reply_to(message, text)

@bot.message_handler(commands=['broadcast'])
@admin_only
def broadcast(message):
    try:
        text = message.text.split(None, 1)[1]
        for admin in ADMIN_IDS:
            bot.send_message(admin, f"üì¢ Broadcast:\n{text}")
        bot.reply_to(message, "‚úÖ ‡§¨‡•ç‡§∞‡•â‡§°‡§ï‡§æ‡§∏‡•ç‡§ü ‡§≠‡•á‡§ú ‡§¶‡§ø‡§Ø‡§æ ‡§ó‡§Ø‡§æ‡•§")
    except:
        bot.reply_to(message, "Usage: /broadcast <message>")

@bot.message_handler(commands=['screenshot'])
@admin_only
def screenshot(message):
    args = message.text.split()
    if len(args) < 2:
        bot.reply_to(message, "Usage: /screenshot <URL>")
        return
    url = args[1]
    filename = f"screenshot_{int(time.time())}.jpg"
    cmd = ['ffmpeg', '-y', '-i', url, '-vframes', '1', filename]
    subprocess.run(cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
    if os.path.exists(filename):
        with open(filename, 'rb') as f:
            bot.send_photo(message.chat.id, f, caption=f"üì∏ Screenshot from {url}")
        os.remove(filename)
    else:
        bot.reply_to(message, "‚ùå Screenshot failed.")

# ---------------- RECORDING ----------------
@bot.message_handler(commands=['record'])
@admin_only
def record(message):
    args = message.text.split()
    if len(args) < 4:
        bot.reply_to(message, "Usage: /record <URL> <hh:mm:ss> <title>")
        return
    url = args[1]
    try:
        h, m, s = map(int, args[2].split(":"))
        duration_sec = h * 3600 + m * 60 + s
    except:
        bot.reply_to(message, "‚ùå Invalid duration format. Use hh:mm:ss")
        return
    title = " ".join(args[3:])
    output_file = f"rec_{message.chat.id}_{int(time.time())}.mp4"
    sent_msg = bot.reply_to(message, f"üé¨ '{title}' ‡§ï‡•Ä ‡§∞‡§ø‡§ï‡•â‡§∞‡•ç‡§°‡§ø‡§Ç‡§ó ‡§∂‡•Å‡§∞‡•Ç ‡§π‡•Å‡§à ({args[2]})")
    msg_id = sent_msg.message_id

    threading.Thread(
        target=record_stream,
        args=(message.chat.id, msg_id, url, duration_sec, title, output_file),
        daemon=True
    ).start()

@bot.message_handler(commands=['cancel'])
@admin_only
def cancel(message):
    if not message.reply_to_message:
        bot.reply_to(message, "‚ö†Ô∏è ‡§∞‡§ø‡§ï‡•â‡§∞‡•ç‡§°‡§ø‡§Ç‡§ó ‡§ï‡•ã ‡§∞‡§¶‡•ç‡§¶ ‡§ï‡§∞‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è, ‡§∞‡§ø‡§ï‡•â‡§∞‡•ç‡§°‡§ø‡§Ç‡§ó ‡§Æ‡•á‡§∏‡•á‡§ú ‡§™‡§∞ reply ‡§ï‡§∞‡•á‡§Ç‡•§")
        return
    chat_id = message.chat.id
    msg_id = message.reply_to_message.message_id
    with lock:
        if chat_id in active_recordings and msg_id in active_recordings[chat_id]:
            proc = active_recordings[chat_id][msg_id]['proc']
            proc.terminate()
            del active_recordings[chat_id][msg_id]
            bot.reply_to(message, "‚ùå ‡§∞‡§ø‡§ï‡•â‡§∞‡•ç‡§°‡§ø‡§Ç‡§ó ‡§∞‡§¶‡•ç‡§¶ ‡§ï‡§∞ ‡§¶‡•Ä ‡§ó‡§à‡•§")
        else:
            bot.reply_to(message, "‚ö†Ô∏è ‡§ï‡•ã‡§à ‡§∏‡§ï‡•ç‡§∞‡§ø‡§Ø ‡§∞‡§ø‡§ï‡•â‡§∞‡•ç‡§°‡§ø‡§Ç‡§ó ‡§®‡§π‡•Ä‡§Ç ‡§Æ‡§ø‡§≤‡•Ä‡•§")

def record_stream(chat_id, msg_id, url, duration_sec, title, output_file):
    with lock:
        if chat_id not in active_recordings:
            active_recordings[chat_id] = {}

    cmd = ['ffmpeg', '-y', '-i', url, '-t', str(duration_sec), '-c', 'copy', output_file]
    proc = subprocess.Popen(cmd, stdout=subprocess.PIPE, stderr=subprocess.STDOUT, text=True)

    with lock:
        active_recordings[chat_id][msg_id] = {'proc': proc, 'title': title}

    proc.wait()

    if os.path.exists(output_file):
        safe_edit_message("‚úÖ ‡§∞‡§ø‡§ï‡•â‡§∞‡•ç‡§°‡§ø‡§Ç‡§ó ‡§™‡•Ç‡§∞‡•Ä ‡§π‡•Å‡§à‡•§ ‡§Ö‡§¨ ‡§Ö‡§™‡§≤‡•ã‡§° ‡§π‡•ã ‡§∞‡§π‡•Ä ‡§π‡•à...", chat_id, msg_id)
        split_and_send(chat_id, msg_id, output_file, title, duration_sec)
    else:
        safe_edit_message("‚ùå ‡§∞‡§ø‡§ï‡•â‡§∞‡•ç‡§°‡§ø‡§Ç‡§ó ‡§µ‡§ø‡§´‡§≤ ‡§∞‡§π‡•Ä‡•§", chat_id, msg_id)

    with lock:
        if chat_id in active_recordings and msg_id in active_recordings[chat_id]:
            del active_recordings[chat_id][msg_id]
        if chat_id in active_recordings and not active_recordings[chat_id]:
            del active_recordings[chat_id]

# ---------------- UPLOAD ----------------
def split_and_send(chat_id, msg_id, file_path, title, duration_sec):
    file_size_mb = os.path.getsize(file_path) / (1024 * 1024)
    if file_size_mb <= MAX_SIZE_MB:
        send_file(chat_id, msg_id, file_path, title)
        os.remove(file_path)
        return
    num_parts = math.ceil(file_size_mb / MAX_SIZE_MB)
    base, ext = os.path.splitext(file_path)
    for i in range(num_parts):
        part_file = f"{base}_part{i+1}{ext}"
        cmd = ['ffmpeg', '-y', '-i', file_path, '-ss', str(i * duration_sec / num_parts),
               '-t', str(duration_sec / num_parts), '-c', 'copy', part_file]
        subprocess.run(cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
        send_file(chat_id, msg_id, part_file, f"{title} Part {i+1}/{num_parts}")
        os.remove(part_file)

def send_file(chat_id, msg_id, file_path, caption):
    status_msg = bot.send_message(chat_id, f"‚¨ÜÔ∏è ‡§Ö‡§™‡§≤‡•ã‡§° ‡§π‡•ã ‡§∞‡§π‡§æ ‡§π‡•à '{caption}'...")

    with open(file_path, 'rb') as f:
        bot.send_video(chat_id, f, caption=f"üé• {caption}")

    safe_edit_message("‚úÖ ‡§Ö‡§™‡§≤‡•ã‡§° ‡§™‡•Ç‡§∞‡§æ ‡§π‡•Å‡§Ü!", chat_id, status_msg.message_id)

# ---------------- START BOT ----------------
print("ü§ñ Bot Started! Unlimited recording enabled.")
bot.infinity_polling()
